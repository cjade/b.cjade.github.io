{"pages":[{"title":"关于我","permalink":"http://www.mcoo.me/about/index.html","text":"一个热衷于造轮子的少年，喜欢： Python Javascript Go 同时我也喜欢： Doctor Who Chopin &amp;&amp; Rachmaninov 我的联系方式： Telegram: @kevinsfork Github： stkevintan Mail: &#x63;&#x68;&#101;&#110;&#x67;&#121;&#117;&#117;&#x40;&#x76;&#105;&#x70;&#x2e;&#x71;&#x71;&#46;&#x63;&#x6f;&#x6d;"}],"posts":[{"title":"学会用各种姿势备份MySQL数据库","permalink":"http://www.mcoo.me/2017/06/06/学会用各种姿势备份MySQL数据库/","text":"前言 ​ 我们试着想一想, 在生产环境中什么最重要？如果我们服务器的硬件坏了可以维修或者换新, 软件问题可以修复或重新安装, 但是如果数据没了呢？这可能是最恐怖的事情了吧, 我感觉在生产环境中应该没有什么比数据跟更为重要. 那么我们该如何保证数据不丢失、或者丢失后可以快速恢复呢？只要看完这篇, 大家应该就能对MySQL中实现数据备份和恢复能有一定的了解。 为什么需要备份数据？ ​ 其实在前言中也大概说明了为什么要备份数据, 但是我们还是应该具体了解一下 为什么要备份数据 ​ 在生产环境中我们数据库可能会遭遇各种各样的不测从而导致数据丢失, 大概分为以下几种. 硬件故障 软件故障 自然灾害 黑客攻击 误操作 (占比最大) 所以, 为了在数据丢失之后能够恢复数据, 我们就需要定期的备份数据, 备份数据的策略要根据不同的应用场景进行定制, 大致有几个参考数值, 我们可以根据这些数值从而定制符合特定环境中的数据备份策略 能够容忍丢失多少数据 恢复数据需要多长时间 需要恢复哪一些数据"},{"title":"Hello World","permalink":"http://www.mcoo.me/2017/06/05/hello-world/","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment"},{"title":"laravel5.4整合极验验证码3.0","permalink":"http://www.mcoo.me/2017/06/05/laravel5-4整合极验验证码3-0/","text":"注册账号注册地址:http://www.geetest.com/注册之后获得最新的ID和KEY 下载sdk把下载下来的sdk改名为geetest放入vendor文件下可以把geetest文件下的其他文件都删除只保留lib文件 把lib下的class.geetestlib.php修改名称为：GeetestLib.class.ph 修改GeetestLib类里的pre_process()方法 123456789101112131415public function pre_process($param, $new_captcha=1) &#123; $data = array('gt'=&gt;$this-&gt;captcha_id, 'new_captcha'=&gt;$new_captcha ); $data = array_merge($data,$param);//没有修改的这里可能会报错 $query = http_build_query($data); $url = \"http://api.geetest.com/register.php?\" . $query; $challenge = $this-&gt;send_request($url); if (strlen($challenge) != 32) &#123; $this-&gt;failback_process(); return 0; &#125; $this-&gt;success_process($challenge); return 1; &#125; 改成1234567891011121314151617public function pre_process($param, $new_captcha=1) &#123; $data = array('gt'=&gt;$this-&gt;captcha_id, 'new_captcha'=&gt;$new_captcha ); if (($param != null) and (is_string($param))) &#123; $data['user_id'] = $param; &#125; $query = http_build_query($data); $url = \"http://api.geetest.com/register.php?\" . $query; $challenge = $this-&gt;send_request($url); if (strlen($challenge) != 32) &#123; $this-&gt;failback_process(); return 0; &#125; $this-&gt;success_process($challenge); return 1; &#125; 在composer.json的autoload内的classmap项新增类包,12345678910\"autoload\": &#123; \"classmap\": [ \"database\", \"vendor/geetest\"//添加自己的 ], \"psr-4\": &#123; \"App\\\\\": \"app/\" &#125; &#125;, 运行终端，cd到项目路径，使用composer命令1composer dumpautoload 然后就能在项目中愉快的使用GeetestLib类了，简单的用法如下：12use GeetestLib;$GtSdk = new GeetestLib() 我是在config文件下新建了sys.php做配置文件方便以后在后台修改123/*验证码配置*/ 'GEE_ID' =&gt; '4c65ff2cf2d4ac493e837a91215fff77', 'GEE_KEY' =&gt; 'e9fc13ecf1178f6a59c80f8f42e5773f', 在App\\Http\\Controllers 下创建Geetest控制器方法getVerify() 12345678910111213141516171819namespace App\\Http\\Controllers;use GeetestLib;class GeetestController extends Controller&#123; public function getVerify()&#123; //实例化并传入极验id与key值 $GtSdk = new GeetestLib(config('sys.GEE_ID'), config('sys.GEE_KEY')); $user_id = \"web\"; $status = $GtSdk-&gt;pre_process($user_id); $data = array( 'gtserver'=&gt;$status, 'user_id'=&gt;$user_id ); session(['geetest'=&gt;$data]); echo $GtSdk-&gt;get_response_str(); &#125;&#125; 创建路由1Route::get(&apos;/getVerify&apos;, &apos;GeetestController@getVerify&apos;)-&gt;name(&apos;getVerify&apos;); 在页面上处理123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125@extends('layouts.app')@section('content')&lt;div class=\"container\"&gt; &lt;div class=\"row\"&gt; &lt;div class=\"col-md-8 col-md-offset-2\"&gt; &lt;div class=\"panel panel-default\"&gt; &lt;div class=\"panel-heading\"&gt;Login&lt;/div&gt; &lt;div class=\"panel-body\"&gt; &lt;form class=\"form-horizontal\" role=\"form\" method=\"POST\" action=\"&#123;&#123; route('login') &#125;&#125;\"&gt; &#123;&#123; csrf_field() &#125;&#125; &lt;div class=\"form-group&#123;&#123; $errors-&gt;has('email') ? ' has-error' : '' &#125;&#125;\"&gt; &lt;label for=\"email\" class=\"col-md-4 control-label\"&gt;E-Mail Address&lt;/label&gt; &lt;div class=\"col-md-6\"&gt; &lt;input id=\"email\" type=\"email\" class=\"form-control\" name=\"email\" value=\"&#123;&#123; old('email') &#125;&#125;\" required autofocus&gt; @if ($errors-&gt;has('email')) &lt;span class=\"help-block\"&gt; &lt;strong&gt;&#123;&#123; $errors-&gt;first('email') &#125;&#125;&lt;/strong&gt; &lt;/span&gt; @endif &lt;/div&gt; &lt;/div&gt; &lt;div class=\"form-group&#123;&#123; $errors-&gt;has('password') ? ' has-error' : '' &#125;&#125;\"&gt; &lt;label for=\"password\" class=\"col-md-4 control-label\"&gt;Password&lt;/label&gt; &lt;div class=\"col-md-6\"&gt; &lt;input id=\"password\" type=\"password\" class=\"form-control\" name=\"password\" required&gt; @if ($errors-&gt;has('password')) &lt;span class=\"help-block\"&gt; &lt;strong&gt;&#123;&#123; $errors-&gt;first('password') &#125;&#125;&lt;/strong&gt; &lt;/span&gt; @endif &lt;/div&gt; &lt;/div&gt; &lt;div id=\"embed-captcha\"&gt;&lt;/div&gt; &lt;p id=\"wait\" class=\"show\"&gt;正在加载验证码......&lt;/p&gt; &lt;p id=\"notice\" class=\"hide\"&gt;请先拖动验证码到相应位置&lt;/p&gt; &lt;div class=\"form-group\"&gt; &lt;div class=\"col-md-6 col-md-offset-4\"&gt; &lt;div class=\"checkbox\"&gt; &lt;label&gt; &lt;input type=\"checkbox\" name=\"remember\" &#123;&#123; old('remember') ? 'checked' : '' &#125;&#125;&gt; Remember Me &lt;/label&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class=\"form-group\"&gt; &lt;div class=\"col-md-8 col-md-offset-4\"&gt; &lt;button type=\"submit\" id=\"but\" class=\"btn btn-primary\" disabled&gt; Login &lt;/button&gt; &lt;a class=\"btn btn-link\" href=\"&#123;&#123; route('password.request') &#125;&#125;\"&gt; Forgot Your Password? &lt;/a&gt; &lt;/div&gt; &lt;/div&gt; &lt;/form&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt;&lt;/div&gt; &lt;script src=\"http://libs.baidu.com/jquery/1.9.0/jquery.js\"&gt;&lt;/script&gt; &lt;!-- 引入封装了failback的接口--initGeetest --&gt; &lt;script src=\"http://static.geetest.com/static/tools/gt.js\"&gt;&lt;/script&gt; &lt;script&gt; var handlerEmbed = function (captchaObj) &#123; $(\"#embed-submit\").click(function (e) &#123; var validate = captchaObj.getValidate(); if (!validate) &#123; $(\"#notice\")[0].className = \"show\"; setTimeout(function () &#123; $(\"#notice\")[0].className = \"hide\"; &#125;, 2000); e.preventDefault(); &#125; &#125;); // 将验证码加到id为captcha的元素里 captchaObj.appendTo(\"#embed-captcha\"); captchaObj.onReady(function () &#123; $(\"#wait\")[0].className = \"hide\"; &#125;); //验证成功 captchaObj.onSuccess(function () &#123; $(\"#but\").attr(\"disabled\",false) &#125;); //验证失败 captchaObj.onError(function () &#123; $(\"#but\").attr(\"disabled\",true) &#125;); // 更多接口参考：http://www.geetest.com/install/sections/idx-client-sdk.html &#125;; $.ajax(&#123; // 获取id，challenge，success（是否启用failback） url: \"&#123;&#123; route('getVerify',array('t'=&gt;time())) &#125;&#125;\", // 加随机数防止缓存 type: \"get\", dataType: \"json\", success: function (data) &#123; console.log(data) // 使用initGeetest接口 // 参数1：配置参数 // 参数2：回调，回调的第一个参数验证码对象，之后可以使用它做appendTo之类的事件 initGeetest(&#123; gt: data.gt, challenge: data.challenge, product: \"float\", // 产品形式，包括：float，embed，popup。注意只对PC版验证码有效 offline: !data.success // 表示用户后台检测极验服务器是否宕机，一般不需要关注 &#125;, handlerEmbed); &#125; &#125;); &lt;/script&gt;@endsection 初始化完成之后的提交时前段会自动验证，然后提交给后台之后处理方法是：1234567891011121314151617181920public function login()&#123; $GtSdk = GeetestLib(config('sys.GEE_ID'), config('sys.GEE_KEY')); $geetest = session(\"geetest\"); $user_id = $geetest['user_id'];); if ($geetest['gtserver'] == 1) &#123; $result = $GtSdk-&gt;success_validate($geetest_challenge, $geetest_validate, $geetest_seccode, $user_id); if ($result) &#123; echo 'Yes!'; &#125; else&#123; echo 'No'; &#125; &#125;else&#123; if ($GtSdk-&gt;fail_validate($geetest_challenge, $geetest_validate, $geetest_seccode)) &#123; echo \"yes\"; &#125;else&#123; echo \"no\"; &#125; &#125;&#125; 然后在页面上就可以看到效果了。"},{"title":"Centos初始化","permalink":"http://www.mcoo.me/2017/01/03/CentOS-1-3/","text":"换源备份1mv /etc/yum.repos.d/CentOS-Base.repo /etc/yum.repos.d/CentOS-Base.repo.backup 写入国内源(centos 7)ustc： https://lug.ustc.edu.cn/wiki/mirrors/help/centos 163： 1234567891011121314151617181920212223242526272829303132333435363738394041# CentOS-Base.repo## The mirror system uses the connecting IP address of the client and the# update status of each mirror to pick mirrors that are updated to and# geographically close to the client. You should use this for CentOS updates# unless you are manually picking other mirrors.## If the mirrorlist= does not work for you, as a fall back you can try the# remarked out baseurl= line instead.##[base]name=CentOS-$releasever - Base - 163.com#mirrorlist=http://mirrorlist.centos.org/?release=$releasever&amp;arch=$basearch&amp;repo=osbaseurl=http://mirrors.163.com/centos/$releasever/os/$basearch/gpgcheck=1gpgkey=http://mirrors.163.com/centos/RPM-GPG-KEY-CentOS-7#released updates[updates]name=CentOS-$releasever - Updates - 163.com#mirrorlist=http://mirrorlist.centos.org/?release=$releasever&amp;arch=$basearch&amp;repo=updatesbaseurl=http://mirrors.163.com/centos/$releasever/updates/$basearch/gpgcheck=1gpgkey=http://mirrors.163.com/centos/RPM-GPG-KEY-CentOS-7#additional packages that may be useful[extras]name=CentOS-$releasever - Extras - 163.com#mirrorlist=http://mirrorlist.centos.org/?release=$releasever&amp;arch=$basearch&amp;repo=extrasbaseurl=http://mirrors.163.com/centos/$releasever/extras/$basearch/gpgcheck=1gpgkey=http://mirrors.163.com/centos/RPM-GPG-KEY-CentOS-7#additional packages that extend functionality of existing packages[centosplus]name=CentOS-$releasever - Plus - 163.combaseurl=http://mirrors.163.com/centos/$releasever/centosplus/$basearch/gpgcheck=1enabled=0gpgkey=http://mirrors.163.com/centos/RPM-GPG-KEY-CentOS-7 更新12yum clean allyum makecache 设置代理123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121#! /bin/bash# Author: Kevin Tan# Update-Date: 2017-1-14URL=$1ACTION=('\\nSet' '\\nDel')mode=1if [ -z $URL ]; then echo '[Warning]: URL parameter is empty, default action change to remove' mode=2fiset_proxy()&#123; file=$1;prefix=$2;value=\"$2=$3\"; echo \"Set \\\"$value\\\" to \\\"$file\\\"\" if [ -e \"$file\" ]; then if grep -q \"^\\s*$prefix\" \"$file\"; then sed -i \"s#^\\s*$prefix=.*#$value#g\" $file else echo $value &gt;&gt; $file fi fi&#125;del_proxy()&#123; file=$1;prefix=$2 echo \"Del \\\"$prefix\\\" from \\\"$file\\\"\" if [ -e \"$file\" ]; then sed -i \"/^\\s*$prefix=.*/d\" $file fi eval $prefix=\"\"&#125;SHELL_NAME=`ps -p $$ | awk 'NR==2 &#123;print $4&#125;'`echo 'Current shell is '$SHELL_NAMEsource_file()&#123; ## bash if [ \"$SHELL_NAME\" = \"bash\" ]; then source $HOME'/.bashrc' fi ## zsh if [ \"$SHELL_NAME\" = \"zsh\" ]; then source $HOME'/.zshrc' fi&#125;# yumecho -n $&#123;ACTION[$mode]&#125;' the yum? (y/n/r) ';read Fif [ $F = 'y' ] &amp;&amp; [ $mode -eq 1 ]; then set_proxy '/etc/yum.conf' 'proxy' $URLelif [ $F = 'r' ] || ([ $F = 'y' ] &amp;&amp; [ $mode -eq 2 ]); then del_proxy '/etc/yum.conf' 'proxy'fi# environmentecho -n $&#123;ACTION[$mode]&#125;' the environment var?(y/n/r) ';read Fshell_names=(zsh bash)if [ $F = 'y' ] &amp;&amp; [ $mode -eq 1 ]; then for name in $&#123;shell_names[@]&#125;; do set_proxy \"$HOME/.$&#123;name&#125;rc\" \"export http_proxy\" $URL set_proxy \"$HOME/.$&#123;name&#125;rc\" \"export https_proxy\" $URL done source_fileelif [ $F = 'r' ] || ([ $F = 'y' ] &amp;&amp; [ $mode -eq 2 ]); then for name in $&#123;shell_names[@]&#125;; do del_proxy \"$HOME/.$&#123;name&#125;rc\" \"export http_proxy\" del_proxy \"$HOME/.$&#123;name&#125;rc\" \"export https_proxy\" donefi#curlecho -n $&#123;ACTION[$mode]&#125;' the curl proxy alias?(y/n/r) ';read Fshell_names=(zsh bash)if [ $F = 'y' ] &amp;&amp; [ $mode -eq 1 ]; then for name in $&#123;shell_names[@]&#125;; do set_proxy \"$HOME/.$&#123;name&#125;rc\" \"alias curl\" \"\\\"curl -x $URL\\\"\" done source_fileelif [ $F = 'r' ] || ([ $F = 'y' ] &amp;&amp; [ $mode -eq 2 ]); then for name in $&#123;shell_names[@]&#125;; do del_proxy \"$HOME/.$&#123;name&#125;rc\" \"alias curl\" unalias curl donefi# kubernetesecho -n $&#123;ACTION[$mode]&#125;' kube environment var?(y/n/r) ';read Fif [ $F = 'y' ] &amp;&amp; [ $mode -eq 1 ]; then for name in $&#123;shell_names[@]&#125;; do set_proxy \"$HOME/.$&#123;name&#125;rc\" \"export KUBERNETES_HTTP_PROXY\" $URL set_proxy \"$HOME/.$&#123;name&#125;rc\" \"export KUBERNETES_HTTPS_PROXY\" $URL set_proxy \"$HOME/.$&#123;name&#125;rc\" \"export KUBE_BUILD_HTTPS_PROXY\" $URL set_proxy \"$HOME/.$&#123;name&#125;rc\" \"export KUBE_BUILD_HTTP_PROXY\" $URL done source_fileelif [ $F = 'r' ] || ([ $F = 'y' ] &amp;&amp; [ $mode -eq 2 ]); then for name in $&#123;shell_names[@]&#125;; do del_proxy \"$HOME/.$&#123;name&#125;rc\" \"export KUBERNETES_HTTP_PROXY\" del_proxy \"$HOME/.$&#123;name&#125;rc\" \"export KUBERNETES_HTTPS_PROXY\" del_proxy \"$HOME/.$&#123;name&#125;rc\" \"export KUBE_BUILD_HTTPS_PROXY\" del_proxy \"$HOME/.$&#123;name&#125;rc\" \"export KUBE_BUILD_HTTP_PROXY\" donefi# dockerecho -n $&#123;ACTION[$mode]&#125;' the docker?(y/n/r) ';read Fif type \"docker\" &amp;&gt;/dev/null &amp;&amp; ([ $F = 'y' ] || [ $F = 'r' ]); then DOCKER_CONF_DIR='/etc/systemd/system/docker.service.d' DOCKER_CONF=$DOCKER_CONF_DIR'/http-proxy.conf' REGISTRY=\"87129800.m.daodocker.io\" sudo mkdir -p \"$DOCKER_CONF_DIR\" sudo rm -rf $DOCKER_CONF if [ $F = 'y' ] &amp;&amp; [ $mode -eq 1 ]; then printf \"[Service]\\nEnvironment=\" | sudo tee $DOCKER_CONF &gt; /dev/null printf \"\\\"HTTP_PROXY=%s\\\" \" $URL | sudo tee -a $DOCKER_CONF &gt; /dev/null printf \"\\\"HTTPS_PROXY=%s\\\" \" $URL | sudo tee -a $DOCKER_CONF &gt; /dev/null printf \"\\\"NO_PROXY=localhost,%s\\\"\" $REGISTRY | sudo tee -a $DOCKER_CONF &gt; /dev/null fi sudo systemctl daemon-reload sudo systemctl restart docker echo \"Daemon reloaded\" systemctl show --property=Environment dockerfi 将上面脚本保持为setproxy，然后执行,注意，如果当前环境下已经有了http_proxy等变量。则需要我们手动reset 12chmod u+x setproxysource setproxy http://10.100.100.136:4411 基础建设git &amp;&amp; gcc1yum install git gcc pip1curl \"https://bootstrap.pypa.io/get-pip.py\" | python EPEL 1rpm -ivh http://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm ZSH安装 &amp; 激活12yum install zshchsh -s /bin/zsh"}]}